<?php

namespace App\Http\Controllers;

use App\Models\product;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;

class PaymentController extends Controller
{
  public function index()
  {
    $cartFarmApp = [];
    $carts = [];
    if (isset($_COOKIE["cartFarmApp"])) {
      $json = $_COOKIE["cartFarmApp"];
      $cartFarmApp = json_decode($json, true);

      $idList = [];
      foreach ($cartFarmApp as $item) {
        $idList[] = $item['productId'];
      }
      if (count($idList) > 0) {
        $carts = product::whereIn('id', $idList)->get();
        for ($i = 0; $i < count($carts); $i++) {
          if ($cartFarmApp[$i]['productId'] == $carts[$i]->id)
            $carts[$i]->amount = $cartFarmApp[$i]['amount'];
        }
      } else {
      }
    }
    $data = [
      'carts' => $carts
    ];
    return view('client.payment.index', $data);
  }
  public function create_payment_vnpay(Request $request)
  {
    session(['cost_id' => $request->id]);
    session(['url_prev' => url()->previous()]);
    $vnp_TmnCode = "UDOPNWS1"; //Mã website tại VNPAY 
    $vnp_HashSecret = "EBAHADUGCOEWYXCMYZRMTMLSHGKNRPBN"; //Chuỗi bí mật
    $vnp_Url = "http://sandbox.vnpayment.vn/paymentv2/vpcpay.html";
    $vnp_Returnurl = "http://localhost:8000/return-vnpay";
    $vnp_TxnRef = date("YmdHis"); //Mã đơn hàng. Trong thực tế Merchant cần insert đơn hàng vào DB và gửi mã này sang VNPAY
    $vnp_OrderInfo = "Thanh toán hóa đơn phí dich vụ";
    $vnp_OrderType = 'billpayment';
    $vnp_Amount = $request->input('amount') * 100;
    $vnp_Locale = 'vn';
    $vnp_IpAddr = request()->ip();

    $inputData = array(
      "vnp_Version" => "2.0.0",
      "vnp_TmnCode" => $vnp_TmnCode,
      "vnp_Amount" => $vnp_Amount,
      "vnp_Command" => "pay",
      "vnp_CreateDate" => date('YmdHis'),
      "vnp_CurrCode" => "VND",
      "vnp_IpAddr" => $vnp_IpAddr,
      "vnp_Locale" => $vnp_Locale,
      "vnp_OrderInfo" => $vnp_OrderInfo,
      "vnp_OrderType" => $vnp_OrderType,
      "vnp_ReturnUrl" => $vnp_Returnurl,
      "vnp_TxnRef" => $vnp_TxnRef,
    );

    if (isset($vnp_BankCode) && $vnp_BankCode != "") {
      $inputData['vnp_BankCode'] = $vnp_BankCode;
    }
    ksort($inputData);
    $query = "";
    $i = 0;
    $hashdata = "";
    foreach ($inputData as $key => $value) {
      if ($i == 1) {
        $hashdata .= '&' . $key . "=" . $value;
      } else {
        $hashdata .= $key . "=" . $value;
        $i = 1;
      }
      $query .= urlencode($key) . "=" . urlencode($value) . '&';
    }

    $vnp_Url = $vnp_Url . "?" . $query;
    if (isset($vnp_HashSecret)) {
      // $vnpSecureHash = md5($vnp_HashSecret . $hashdata);
      $vnpSecureHash = hash('sha256', $vnp_HashSecret . $hashdata);
      $vnp_Url .= 'vnp_SecureHashType=SHA256&vnp_SecureHash=' . $vnpSecureHash;
    }
    return redirect($vnp_Url);
  }
  public function return_payment_vnpay(Request $request)
  {
    $url = session('url_prev', '/');
    if ($request->vnp_ResponseCode == "00") {
      // $this->apSer->thanhtoanonline(session('cost_id'));
      return redirect($url)->with('success', 'Đã thanh toán phí dịch vụ');
    }
    session()->forget('url_prev');
    return redirect($url)->with('errors', 'Lỗi trong quá trình thanh toán phí dịch vụ');
  }
  public function create_payment_vnpay_e()
  {
    $vnp_Url = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html";
    $vnp_Returnurl = route('clientreturn_payment_vnpay');
    $vnp_TmnCode = "Q57HT4LD"; //Mã website tại VNPAY 
    $vnp_HashSecret = "ZNJZVKHJSPIOYDYRREQVECNZELACJGDZ"; //Chuỗi bí mật

    $vnp_TxnRef = rand(0000, 9999); //Mã đơn hàng. Trong thực tế Merchant cần insert đơn hàng vào DB và gửi mã này sang VNPAY
    $vnp_OrderInfo = "Thanh toán đơn hang test";
    $vnp_OrderType = 'billpayment';
    $vnp_Amount = 10000 * 100;
    $vnp_Locale = "vn";
    $vnp_BankCode = "NCB";
    $vnp_IpAddr = $_SERVER['REMOTE_ADDR'];
   
    $inputData = array(
      "vnp_Version" => "2.1.0",
      "vnp_TmnCode" => $vnp_TmnCode,
      "vnp_Amount" => $vnp_Amount,
      "vnp_Command" => "pay",
      "vnp_CreateDate" => date('YmdHis'),
      "vnp_CurrCode" => "VND",
      "vnp_IpAddr" => $vnp_IpAddr,
      "vnp_Locale" => $vnp_Locale,
      "vnp_OrderInfo" => $vnp_OrderInfo,
      "vnp_OrderType" => $vnp_OrderType,
      "vnp_ReturnUrl" => $vnp_Returnurl,
      "vnp_TxnRef" => $vnp_TxnRef,
      // "vnp_ExpireDate" => $vnp_ExpireDate,
      // "vnp_Bill_Mobile" => $vnp_Bill_Mobile,
      // "vnp_Bill_Email" => $vnp_Bill_Email,
      // "vnp_Bill_FirstName" => $vnp_Bill_FirstName,
      // "vnp_Bill_LastName" => $vnp_Bill_LastName,
      // "vnp_Bill_Address" => $vnp_Bill_Address,
      // "vnp_Bill_City" => $vnp_Bill_City,
      // "vnp_Bill_Country" => $vnp_Bill_Country,
      // "vnp_Inv_Phone" => $vnp_Inv_Phone,
      // "vnp_Inv_Email" => $vnp_Inv_Email,
      // "vnp_Inv_Customer" => $vnp_Inv_Customer,
      // "vnp_Inv_Address" => $vnp_Inv_Address,
      // "vnp_Inv_Company" => $vnp_Inv_Company,
      // "vnp_Inv_Taxcode" => $vnp_Inv_Taxcode,
      // "vnp_Inv_Type" => $vnp_Inv_Type
    );

    if (isset($vnp_BankCode) && $vnp_BankCode != "") {
      $inputData['vnp_BankCode'] = $vnp_BankCode;
    }
    if (isset($vnp_Bill_State) && $vnp_Bill_State != "") {
      $inputData['vnp_Bill_State'] = $vnp_Bill_State;
    }

    //var_dump($inputData);
    ksort($inputData);
    $query = "";
    $i = 0;
    $hashdata = "";
    foreach ($inputData as $key => $value) {
      if ($i == 1) {
        $hashdata .= '&' . urlencode($key) . "=" . urlencode($value);
      } else {
        $hashdata .= urlencode($key) . "=" . urlencode($value);
        $i = 1;
      }
      $query .= urlencode($key) . "=" . urlencode($value) . '&';
    }

    $vnp_Url = $vnp_Url . "?" . $query;
    if (isset($vnp_HashSecret)) {
      $vnpSecureHash =   hash_hmac('sha512', $hashdata, $vnp_HashSecret); //  
      $vnp_Url .= 'vnp_SecureHash=' . $vnpSecureHash;
    }
    $returnData = array(
      'code' => '00', 'message' => 'success', 'data' => $vnp_Url
    );
    return redirect($vnp_Url);
  }
  public function return_payment_vnpay_e(Request $request)
  {
    dd($request);
  }
  public function create_payment_momo_qr(Request $request)
  {
    header('Content-type: text/html; charset=utf-8');



    $endpoint = "https://test-payment.momo.vn/gw_payment/transactionProcessor";


    $partnerCode = "MOMOBKUN20180529";
    $accessKey = "klm05TvNBzhg7h7j";
    $secretKey = "at67qH6mk8w5Y1nAyMoYKMWACiEi2bsa";
    $orderInfo = "Thanh toán qua MoMo";
    $amount = "10000";
    $orderId = time() . "";
    $returnUrl = "http://localhost:8000/paymomo/result.php";
    $notifyurl = "http://localhost:8000/paymomo/ipn_momo.php";
    // Lưu ý: link notifyUrl không phải là dạng localhost
    $extraData = "merchantName=MoMo Partner";

    $requestId = time() . "";
    $requestType = "captureMoMoWallet";
    // $extraData = ($_POST["extraData"] ? $_POST["extraData"] : "");
    //before sign HMAC SHA256 signature
    $rawHash = "partnerCode=" . $partnerCode . "&accessKey=" . $accessKey . "&requestId=" . $requestId . "&amount=" . $amount . "&orderId=" . $orderId . "&orderInfo=" . $orderInfo . "&returnUrl=" . $returnUrl . "&notifyUrl=" . $notifyurl . "&extraData=" . $extraData;
    $signature = hash_hmac("sha256", $rawHash, $secretKey);
    $data = array(
      'partnerCode' => $partnerCode,
      'accessKey' => $accessKey,
      'requestId' => $requestId,
      'amount' => $amount,
      'orderId' => $orderId,
      'orderInfo' => $orderInfo,
      'returnUrl' => $returnUrl,
      'notifyUrl' => $notifyurl,
      'extraData' => $extraData,
      'requestType' => $requestType,
      'signature' => $signature
    );
    $result = $this->execPostRequest($endpoint, json_encode($data));
    $jsonResult = json_decode($result, true);  // decode json

    //Just a example, please check more in there

    header('Location: ' . $jsonResult['payUrl']);
  }

  public function return_payment_momo_qr()
  {
    dd('xin chào');
  }
  public function execPostRequest($url, $data)
  {
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt(
      $ch,
      CURLOPT_HTTPHEADER,
      array(
        'Content-Type: application/json',
        'Content-Length: ' . strlen($data)
      )
    );
    curl_setopt($ch, CURLOPT_TIMEOUT, 5);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
    //execute post
    $result = curl_exec($ch);
    //close connection
    curl_close($ch);
    return $result;
  }
  public function create_payment_momo_atm(Request $request)
  {

    $endpoint = "https://test-payment.momo.vn/gw_payment/transactionProcessor";


    $partnerCode = "MOMOBKUN20180529";
    $accessKey = "klm05TvNBzhg7h7j";
    $secretKey = "at67qH6mk8w5Y1nAyMoYKMWACiEi2bsa";
    $orderInfo = "Thanh toán qua MoMo";
    $orderInfo = "Thanh toán qua MoMo";
    $amount = "10000";
    $orderId = time() . "";
    $returnUrl = route('clientreturn_payment_momo_atm');
    $notifyurl = route('clientpayment');
    // Lưu ý: link notifyUrl không phải là dạng localhost
    $bankCode = "SML";
    $requestId = time() . "";
    $requestType = "payWithMoMoATM";
    $extraData = "";
    //before sign HMAC SHA256 signature
    $rawHashArr =  array(
      'partnerCode' => $partnerCode,
      'accessKey' => $accessKey,
      'requestId' => $requestId,
      'amount' => $amount,
      'orderId' => $orderId,
      'orderInfo' => $orderInfo,
      'bankCode' => $bankCode,
      'returnUrl' => $returnUrl,
      'notifyUrl' => $notifyurl,
      'extraData' => $extraData,
      'requestType' => $requestType
    );
    // echo $serectkey;die;
    $rawHash = "partnerCode=" . $partnerCode . "&accessKey=" . $accessKey . "&requestId=" . $requestId . "&bankCode=" . $bankCode . "&amount=" . $amount . "&orderId=" . $orderId . "&orderInfo=" . $orderInfo . "&returnUrl=" . $returnUrl . "&notifyUrl=" . $notifyurl . "&extraData=" . $extraData . "&requestType=" . $requestType;
    $signature = hash_hmac("sha256", $rawHash, $secretKey);
    $data =  array(
      'partnerCode' => $partnerCode,
      'accessKey' => $accessKey,
      'requestId' => $requestId,
      'amount' => $amount,
      'orderId' => $orderId,
      'orderInfo' => $orderInfo,
      'returnUrl' => $returnUrl,
      'bankCode' => $bankCode,
      'notifyUrl' => $notifyurl,
      'extraData' => $extraData,
      'requestType' => $requestType,
      'signature' => $signature
    );
    $result = $this->execPostRequest($endpoint, json_encode($data));
    $jsonResult = json_decode($result, true);  // decode json

    error_log(print_r($jsonResult, true));
    return redirect($jsonResult['payUrl']);

    
  }
  public function return_payment_momo_atm(Request $request)
  {
    # code...
  }
}
